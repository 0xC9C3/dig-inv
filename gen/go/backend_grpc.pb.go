// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: backend.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OpenIdAuthService_GetUserInfo_FullMethodName  = "/your.service.v1.OpenIdAuthService/GetUserInfo"
	OpenIdAuthService_BeginAuth_FullMethodName    = "/your.service.v1.OpenIdAuthService/BeginAuth"
	OpenIdAuthService_ExchangeCode_FullMethodName = "/your.service.v1.OpenIdAuthService/ExchangeCode"
)

// OpenIdAuthServiceClient is the client API for OpenIdAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenIdAuthServiceClient interface {
	GetUserInfo(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*UserSubjectMessage, error)
	BeginAuth(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AuthUrlMessage, error)
	ExchangeCode(ctx context.Context, in *ExchangeCodeMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
}

type openIdAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenIdAuthServiceClient(cc grpc.ClientConnInterface) OpenIdAuthServiceClient {
	return &openIdAuthServiceClient{cc}
}

func (c *openIdAuthServiceClient) GetUserInfo(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*UserSubjectMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserSubjectMessage)
	err := c.cc.Invoke(ctx, OpenIdAuthService_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openIdAuthServiceClient) BeginAuth(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AuthUrlMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthUrlMessage)
	err := c.cc.Invoke(ctx, OpenIdAuthService_BeginAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openIdAuthServiceClient) ExchangeCode(ctx context.Context, in *ExchangeCodeMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, OpenIdAuthService_ExchangeCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenIdAuthServiceServer is the server API for OpenIdAuthService service.
// All implementations must embed UnimplementedOpenIdAuthServiceServer
// for forward compatibility.
type OpenIdAuthServiceServer interface {
	GetUserInfo(context.Context, *EmptyMessage) (*UserSubjectMessage, error)
	BeginAuth(context.Context, *EmptyMessage) (*AuthUrlMessage, error)
	ExchangeCode(context.Context, *ExchangeCodeMessage) (*EmptyMessage, error)
	mustEmbedUnimplementedOpenIdAuthServiceServer()
}

// UnimplementedOpenIdAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOpenIdAuthServiceServer struct{}

func (UnimplementedOpenIdAuthServiceServer) GetUserInfo(context.Context, *EmptyMessage) (*UserSubjectMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedOpenIdAuthServiceServer) BeginAuth(context.Context, *EmptyMessage) (*AuthUrlMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginAuth not implemented")
}
func (UnimplementedOpenIdAuthServiceServer) ExchangeCode(context.Context, *ExchangeCodeMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeCode not implemented")
}
func (UnimplementedOpenIdAuthServiceServer) mustEmbedUnimplementedOpenIdAuthServiceServer() {}
func (UnimplementedOpenIdAuthServiceServer) testEmbeddedByValue()                           {}

// UnsafeOpenIdAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenIdAuthServiceServer will
// result in compilation errors.
type UnsafeOpenIdAuthServiceServer interface {
	mustEmbedUnimplementedOpenIdAuthServiceServer()
}

func RegisterOpenIdAuthServiceServer(s grpc.ServiceRegistrar, srv OpenIdAuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedOpenIdAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OpenIdAuthService_ServiceDesc, srv)
}

func _OpenIdAuthService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenIdAuthServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenIdAuthService_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenIdAuthServiceServer).GetUserInfo(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenIdAuthService_BeginAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenIdAuthServiceServer).BeginAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenIdAuthService_BeginAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenIdAuthServiceServer).BeginAuth(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenIdAuthService_ExchangeCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeCodeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenIdAuthServiceServer).ExchangeCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenIdAuthService_ExchangeCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenIdAuthServiceServer).ExchangeCode(ctx, req.(*ExchangeCodeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenIdAuthService_ServiceDesc is the grpc.ServiceDesc for OpenIdAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenIdAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "your.service.v1.OpenIdAuthService",
	HandlerType: (*OpenIdAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _OpenIdAuthService_GetUserInfo_Handler,
		},
		{
			MethodName: "BeginAuth",
			Handler:    _OpenIdAuthService_BeginAuth_Handler,
		},
		{
			MethodName: "ExchangeCode",
			Handler:    _OpenIdAuthService_ExchangeCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend.proto",
}
