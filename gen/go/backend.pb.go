// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: backend.proto

package _go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserInfoMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subject       string                 `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Email         string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserInfoMessage) Reset() {
	*x = UserInfoMessage{}
	mi := &file_backend_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInfoMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoMessage) ProtoMessage() {}

func (x *UserInfoMessage) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoMessage.ProtoReflect.Descriptor instead.
func (*UserInfoMessage) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{0}
}

func (x *UserInfoMessage) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *UserInfoMessage) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type AuthUrlMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthUrlMessage) Reset() {
	*x = AuthUrlMessage{}
	mi := &file_backend_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthUrlMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthUrlMessage) ProtoMessage() {}

func (x *AuthUrlMessage) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthUrlMessage.ProtoReflect.Descriptor instead.
func (*AuthUrlMessage) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{1}
}

func (x *AuthUrlMessage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type EmptyMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmptyMessage) Reset() {
	*x = EmptyMessage{}
	mi := &file_backend_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmptyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyMessage) ProtoMessage() {}

func (x *EmptyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyMessage.ProtoReflect.Descriptor instead.
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{2}
}

type ExchangeCodeMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	State         string                 `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExchangeCodeMessage) Reset() {
	*x = ExchangeCodeMessage{}
	mi := &file_backend_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeCodeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeCodeMessage) ProtoMessage() {}

func (x *ExchangeCodeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeCodeMessage.ProtoReflect.Descriptor instead.
func (*ExchangeCodeMessage) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{3}
}

func (x *ExchangeCodeMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ExchangeCodeMessage) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type ElementId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ElementId) Reset() {
	*x = ElementId{}
	mi := &file_backend_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ElementId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementId) ProtoMessage() {}

func (x *ElementId) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementId.ProtoReflect.Descriptor instead.
func (*ElementId) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{4}
}

func (x *ElementId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Item struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Item) Reset() {
	*x = Item{}
	mi := &file_backend_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{5}
}

func (x *Item) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Item) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Items struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Item                `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Items) Reset() {
	*x = Items{}
	mi := &file_backend_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Items) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Items) ProtoMessage() {}

func (x *Items) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Items.ProtoReflect.Descriptor instead.
func (*Items) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{6}
}

func (x *Items) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type UserGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserGroup) Reset() {
	*x = UserGroup{}
	mi := &file_backend_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGroup) ProtoMessage() {}

func (x *UserGroup) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGroup.ProtoReflect.Descriptor instead.
func (*UserGroup) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{7}
}

func (x *UserGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UserGroups struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Groups        []*UserGroup           `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserGroups) Reset() {
	*x = UserGroups{}
	mi := &file_backend_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGroups) ProtoMessage() {}

func (x *UserGroups) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGroups.ProtoReflect.Descriptor instead.
func (*UserGroups) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{8}
}

func (x *UserGroups) GetGroups() []*UserGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type Tag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tag) Reset() {
	*x = Tag{}
	mi := &file_backend_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{9}
}

func (x *Tag) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Tags struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tags          []*Tag                 `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tags) Reset() {
	*x = Tags{}
	mi := &file_backend_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tags) ProtoMessage() {}

func (x *Tags) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tags.ProtoReflect.Descriptor instead.
func (*Tags) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{10}
}

func (x *Tags) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type AssetClass struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Icon          string                 `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Color         string                 `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
	Order         int32                  `protobuf:"varint,6,opt,name=order,proto3" json:"order,omitempty"`
	Provider      string                 `protobuf:"bytes,7,opt,name=provider,proto3" json:"provider,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetClass) Reset() {
	*x = AssetClass{}
	mi := &file_backend_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetClass) ProtoMessage() {}

func (x *AssetClass) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetClass.ProtoReflect.Descriptor instead.
func (*AssetClass) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{11}
}

func (x *AssetClass) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AssetClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AssetClass) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AssetClass) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *AssetClass) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *AssetClass) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *AssetClass) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type AssetClasses struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Classes       []*AssetClass          `protobuf:"bytes,1,rep,name=classes,proto3" json:"classes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetClasses) Reset() {
	*x = AssetClasses{}
	mi := &file_backend_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetClasses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetClasses) ProtoMessage() {}

func (x *AssetClasses) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetClasses.ProtoReflect.Descriptor instead.
func (*AssetClasses) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{12}
}

func (x *AssetClasses) GetClasses() []*AssetClass {
	if x != nil {
		return x.Classes
	}
	return nil
}

var File_backend_proto protoreflect.FileDescriptor

var file_backend_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x22, 0x41, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x22, 0x0a, 0x0e, 0x41,
	0x75, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x3f, 0x0a, 0x13, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x1b, 0x0a, 0x09, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a,
	0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x05, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x2f, 0x0a, 0x09, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x0a, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69,
	0x6e, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x22, 0x29, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x28, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e,
	0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x0a, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x3d, 0x0a, 0x0c, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x69,
	0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x32, 0x95, 0x02, 0x0a, 0x11, 0x4f, 0x70,
	0x65, 0x6e, 0x49, 0x64, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x40, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15,
	0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x12, 0x3d, 0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x12, 0x15,
	0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x17, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x12, 0x45, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x15,
	0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x12, 0x15, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69,
	0x6e, 0x76, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x32, 0x8c, 0x02, 0x0a, 0x0b, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x31, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x15, 0x2e, 0x64,
	0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x15, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0e, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e,
	0x76, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0d, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e,
	0x76, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x0d, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0d, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x1a, 0x0d, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x12, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x15, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e,
	0x76, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x32, 0xf2, 0x02, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x15, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x12, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69,
	0x6e, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12, 0x38,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x15, 0x2e, 0x64, 0x69,
	0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x12, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e,
	0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x12, 0x2e, 0x64, 0x69,
	0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22,
	0x00, 0x12, 0x37, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x12, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x1a, 0x12, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x2e, 0x64, 0x69, 0x67, 0x5f,
	0x69, 0x6e, 0x76, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x15, 0x2e,
	0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69,
	0x6e, 0x76, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x15, 0x2e, 0x64,
	0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x32, 0x4e, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x15, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x64,
	0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x32, 0xbd, 0x02, 0x0a, 0x0a, 0x54, 0x61, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x12, 0x15,
	0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0c, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e,
	0x54, 0x61, 0x67, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x15, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e,
	0x76, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x0c, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e,
	0x54, 0x61, 0x67, 0x1a, 0x0c, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x54, 0x61,
	0x67, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67,
	0x12, 0x0c, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x54, 0x61, 0x67, 0x1a, 0x0c,
	0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x54, 0x61, 0x67, 0x22, 0x00, 0x12, 0x38,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x12, 0x2e, 0x64, 0x69,
	0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a,
	0x15, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x54, 0x6f, 0x54, 0x61, 0x67, 0x12, 0x12, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69,
	0x6e, 0x76, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x15, 0x2e, 0x64,
	0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x32, 0xd6, 0x02, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x15, 0x2e, 0x64,
	0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x15, 0x2e,
	0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x13, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x1a, 0x13, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x13, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x1a, 0x13, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x12, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x15, 0x2e, 0x64, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x42, 0x10,
	0x5a, 0x0e, 0x64, 0x69, 0x67, 0x2d, 0x69, 0x6e, 0x76, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_backend_proto_rawDescOnce sync.Once
	file_backend_proto_rawDescData []byte
)

func file_backend_proto_rawDescGZIP() []byte {
	file_backend_proto_rawDescOnce.Do(func() {
		file_backend_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_backend_proto_rawDesc), len(file_backend_proto_rawDesc)))
	})
	return file_backend_proto_rawDescData
}

var file_backend_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_backend_proto_goTypes = []any{
	(*UserInfoMessage)(nil),     // 0: dig_inv.UserInfoMessage
	(*AuthUrlMessage)(nil),      // 1: dig_inv.AuthUrlMessage
	(*EmptyMessage)(nil),        // 2: dig_inv.EmptyMessage
	(*ExchangeCodeMessage)(nil), // 3: dig_inv.ExchangeCodeMessage
	(*ElementId)(nil),           // 4: dig_inv.ElementId
	(*Item)(nil),                // 5: dig_inv.Item
	(*Items)(nil),               // 6: dig_inv.Items
	(*UserGroup)(nil),           // 7: dig_inv.UserGroup
	(*UserGroups)(nil),          // 8: dig_inv.UserGroups
	(*Tag)(nil),                 // 9: dig_inv.Tag
	(*Tags)(nil),                // 10: dig_inv.Tags
	(*AssetClass)(nil),          // 11: dig_inv.AssetClass
	(*AssetClasses)(nil),        // 12: dig_inv.AssetClasses
}
var file_backend_proto_depIdxs = []int32{
	5,  // 0: dig_inv.Items.items:type_name -> dig_inv.Item
	7,  // 1: dig_inv.UserGroups.groups:type_name -> dig_inv.UserGroup
	9,  // 2: dig_inv.Tags.tags:type_name -> dig_inv.Tag
	11, // 3: dig_inv.AssetClasses.classes:type_name -> dig_inv.AssetClass
	2,  // 4: dig_inv.OpenIdAuthService.GetUserInfo:input_type -> dig_inv.EmptyMessage
	2,  // 5: dig_inv.OpenIdAuthService.BeginAuth:input_type -> dig_inv.EmptyMessage
	3,  // 6: dig_inv.OpenIdAuthService.ExchangeCode:input_type -> dig_inv.ExchangeCodeMessage
	2,  // 7: dig_inv.OpenIdAuthService.Logout:input_type -> dig_inv.EmptyMessage
	2,  // 8: dig_inv.ItemService.GetItem:input_type -> dig_inv.EmptyMessage
	2,  // 9: dig_inv.ItemService.GetItems:input_type -> dig_inv.EmptyMessage
	5,  // 10: dig_inv.ItemService.CreateItem:input_type -> dig_inv.Item
	5,  // 11: dig_inv.ItemService.UpdateItem:input_type -> dig_inv.Item
	4,  // 12: dig_inv.ItemService.DeleteItem:input_type -> dig_inv.ElementId
	2,  // 13: dig_inv.UserGroupService.GetGroup:input_type -> dig_inv.EmptyMessage
	2,  // 14: dig_inv.UserGroupService.GetGroups:input_type -> dig_inv.EmptyMessage
	7,  // 15: dig_inv.UserGroupService.CreateGroup:input_type -> dig_inv.UserGroup
	7,  // 16: dig_inv.UserGroupService.UpdateGroup:input_type -> dig_inv.UserGroup
	4,  // 17: dig_inv.UserGroupService.DeleteGroup:input_type -> dig_inv.ElementId
	4,  // 18: dig_inv.UserGroupService.AddItemToGroup:input_type -> dig_inv.ElementId
	2,  // 19: dig_inv.HealthService.HealthCheck:input_type -> dig_inv.EmptyMessage
	2,  // 20: dig_inv.TagService.GetTag:input_type -> dig_inv.EmptyMessage
	2,  // 21: dig_inv.TagService.GetTags:input_type -> dig_inv.EmptyMessage
	9,  // 22: dig_inv.TagService.CreateTag:input_type -> dig_inv.Tag
	9,  // 23: dig_inv.TagService.UpdateTag:input_type -> dig_inv.Tag
	4,  // 24: dig_inv.TagService.DeleteTag:input_type -> dig_inv.ElementId
	4,  // 25: dig_inv.TagService.AddItemToTag:input_type -> dig_inv.ElementId
	2,  // 26: dig_inv.AssetClassService.GetAssetClass:input_type -> dig_inv.EmptyMessage
	2,  // 27: dig_inv.AssetClassService.GetAssetClasses:input_type -> dig_inv.EmptyMessage
	11, // 28: dig_inv.AssetClassService.CreateAssetClass:input_type -> dig_inv.AssetClass
	11, // 29: dig_inv.AssetClassService.UpdateAssetClass:input_type -> dig_inv.AssetClass
	4,  // 30: dig_inv.AssetClassService.DeleteAssetClass:input_type -> dig_inv.ElementId
	0,  // 31: dig_inv.OpenIdAuthService.GetUserInfo:output_type -> dig_inv.UserInfoMessage
	1,  // 32: dig_inv.OpenIdAuthService.BeginAuth:output_type -> dig_inv.AuthUrlMessage
	2,  // 33: dig_inv.OpenIdAuthService.ExchangeCode:output_type -> dig_inv.EmptyMessage
	2,  // 34: dig_inv.OpenIdAuthService.Logout:output_type -> dig_inv.EmptyMessage
	5,  // 35: dig_inv.ItemService.GetItem:output_type -> dig_inv.Item
	6,  // 36: dig_inv.ItemService.GetItems:output_type -> dig_inv.Items
	5,  // 37: dig_inv.ItemService.CreateItem:output_type -> dig_inv.Item
	5,  // 38: dig_inv.ItemService.UpdateItem:output_type -> dig_inv.Item
	2,  // 39: dig_inv.ItemService.DeleteItem:output_type -> dig_inv.EmptyMessage
	7,  // 40: dig_inv.UserGroupService.GetGroup:output_type -> dig_inv.UserGroup
	7,  // 41: dig_inv.UserGroupService.GetGroups:output_type -> dig_inv.UserGroup
	7,  // 42: dig_inv.UserGroupService.CreateGroup:output_type -> dig_inv.UserGroup
	7,  // 43: dig_inv.UserGroupService.UpdateGroup:output_type -> dig_inv.UserGroup
	2,  // 44: dig_inv.UserGroupService.DeleteGroup:output_type -> dig_inv.EmptyMessage
	2,  // 45: dig_inv.UserGroupService.AddItemToGroup:output_type -> dig_inv.EmptyMessage
	2,  // 46: dig_inv.HealthService.HealthCheck:output_type -> dig_inv.EmptyMessage
	9,  // 47: dig_inv.TagService.GetTag:output_type -> dig_inv.Tag
	10, // 48: dig_inv.TagService.GetTags:output_type -> dig_inv.Tags
	9,  // 49: dig_inv.TagService.CreateTag:output_type -> dig_inv.Tag
	9,  // 50: dig_inv.TagService.UpdateTag:output_type -> dig_inv.Tag
	2,  // 51: dig_inv.TagService.DeleteTag:output_type -> dig_inv.EmptyMessage
	2,  // 52: dig_inv.TagService.AddItemToTag:output_type -> dig_inv.EmptyMessage
	11, // 53: dig_inv.AssetClassService.GetAssetClass:output_type -> dig_inv.AssetClass
	12, // 54: dig_inv.AssetClassService.GetAssetClasses:output_type -> dig_inv.AssetClasses
	11, // 55: dig_inv.AssetClassService.CreateAssetClass:output_type -> dig_inv.AssetClass
	11, // 56: dig_inv.AssetClassService.UpdateAssetClass:output_type -> dig_inv.AssetClass
	2,  // 57: dig_inv.AssetClassService.DeleteAssetClass:output_type -> dig_inv.EmptyMessage
	31, // [31:58] is the sub-list for method output_type
	4,  // [4:31] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_backend_proto_init() }
func file_backend_proto_init() {
	if File_backend_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_backend_proto_rawDesc), len(file_backend_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_backend_proto_goTypes,
		DependencyIndexes: file_backend_proto_depIdxs,
		MessageInfos:      file_backend_proto_msgTypes,
	}.Build()
	File_backend_proto = out.File
	file_backend_proto_goTypes = nil
	file_backend_proto_depIdxs = nil
}
