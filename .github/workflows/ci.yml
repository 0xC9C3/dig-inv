name: "CI Workflow"
on:
  push:
    branches:
      - "*"
      - "*/*"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  APP_IMAGE_NAME: ${{ github.repository }}/app

jobs:
  test-frontend-e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - uses: actions/cache@v4
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run tests
        env:
          PUBLIC_BACKEND_URL: "http://localhost:8080"
        run: |
          cd frontend
          npm ci
          npx playwright install-deps
          npx playwright install
          npm run test:e2e
  test-frontend-unit:
    runs-on: ubuntu-latest
    steps:
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - uses: actions/cache@v4
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run tests
        env:
          PUBLIC_BACKEND_URL: "http://localhost:8080"
        run: |
          cd frontend
          npm ci
          npm run test:unit
  test-lint-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.24'
      - name: Install dependencies
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.1.6
          go mod download
      - name: Run linter
        run: just go-lint
      - name: Run tests
        run: just go-tests
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-backend
          path: 'coverage.html'
  build-app:
    needs: [ 'test-frontend-e2e', 'test-frontend-unit', 'test-lint-backend' ]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    runs-on: ubuntu-latest
    concurrency:
      group: "build-app-${{ github.ref }}"
      cancel-in-progress: true
    outputs:
      meta_json: ${{ steps.meta.outputs.json }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.APP_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          target: prod
          file: Dockerfile
          tags: ${{ steps.meta.outputs.tags }},
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max