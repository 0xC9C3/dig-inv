// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dig-inv/ent/assetclass"
	"dig-inv/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AssetClassUpdate is the builder for updating AssetClass entities.
type AssetClassUpdate struct {
	config
	hooks    []Hook
	mutation *AssetClassMutation
}

// Where appends a list predicates to the AssetClassUpdate builder.
func (acu *AssetClassUpdate) Where(ps ...predicate.AssetClass) *AssetClassUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetOrder sets the "order" field.
func (acu *AssetClassUpdate) SetOrder(i int) *AssetClassUpdate {
	acu.mutation.ResetOrder()
	acu.mutation.SetOrder(i)
	return acu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (acu *AssetClassUpdate) SetNillableOrder(i *int) *AssetClassUpdate {
	if i != nil {
		acu.SetOrder(*i)
	}
	return acu
}

// AddOrder adds i to the "order" field.
func (acu *AssetClassUpdate) AddOrder(i int) *AssetClassUpdate {
	acu.mutation.AddOrder(i)
	return acu
}

// SetName sets the "name" field.
func (acu *AssetClassUpdate) SetName(s string) *AssetClassUpdate {
	acu.mutation.SetName(s)
	return acu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acu *AssetClassUpdate) SetNillableName(s *string) *AssetClassUpdate {
	if s != nil {
		acu.SetName(*s)
	}
	return acu
}

// SetDescription sets the "description" field.
func (acu *AssetClassUpdate) SetDescription(s string) *AssetClassUpdate {
	acu.mutation.SetDescription(s)
	return acu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (acu *AssetClassUpdate) SetNillableDescription(s *string) *AssetClassUpdate {
	if s != nil {
		acu.SetDescription(*s)
	}
	return acu
}

// ClearDescription clears the value of the "description" field.
func (acu *AssetClassUpdate) ClearDescription() *AssetClassUpdate {
	acu.mutation.ClearDescription()
	return acu
}

// SetIcon sets the "icon" field.
func (acu *AssetClassUpdate) SetIcon(s string) *AssetClassUpdate {
	acu.mutation.SetIcon(s)
	return acu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (acu *AssetClassUpdate) SetNillableIcon(s *string) *AssetClassUpdate {
	if s != nil {
		acu.SetIcon(*s)
	}
	return acu
}

// ClearIcon clears the value of the "icon" field.
func (acu *AssetClassUpdate) ClearIcon() *AssetClassUpdate {
	acu.mutation.ClearIcon()
	return acu
}

// SetColor sets the "color" field.
func (acu *AssetClassUpdate) SetColor(s string) *AssetClassUpdate {
	acu.mutation.SetColor(s)
	return acu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (acu *AssetClassUpdate) SetNillableColor(s *string) *AssetClassUpdate {
	if s != nil {
		acu.SetColor(*s)
	}
	return acu
}

// ClearColor clears the value of the "color" field.
func (acu *AssetClassUpdate) ClearColor() *AssetClassUpdate {
	acu.mutation.ClearColor()
	return acu
}

// SetProvider sets the "provider" field.
func (acu *AssetClassUpdate) SetProvider(s string) *AssetClassUpdate {
	acu.mutation.SetProvider(s)
	return acu
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (acu *AssetClassUpdate) SetNillableProvider(s *string) *AssetClassUpdate {
	if s != nil {
		acu.SetProvider(*s)
	}
	return acu
}

// ClearProvider clears the value of the "provider" field.
func (acu *AssetClassUpdate) ClearProvider() *AssetClassUpdate {
	acu.mutation.ClearProvider()
	return acu
}

// SetCreatedBy sets the "created_by" field.
func (acu *AssetClassUpdate) SetCreatedBy(s string) *AssetClassUpdate {
	acu.mutation.SetCreatedBy(s)
	return acu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (acu *AssetClassUpdate) SetNillableCreatedBy(s *string) *AssetClassUpdate {
	if s != nil {
		acu.SetCreatedBy(*s)
	}
	return acu
}

// SetUpdatedBy sets the "updated_by" field.
func (acu *AssetClassUpdate) SetUpdatedBy(s string) *AssetClassUpdate {
	acu.mutation.SetUpdatedBy(s)
	return acu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (acu *AssetClassUpdate) SetNillableUpdatedBy(s *string) *AssetClassUpdate {
	if s != nil {
		acu.SetUpdatedBy(*s)
	}
	return acu
}

// SetUpdatedAt sets the "updated_at" field.
func (acu *AssetClassUpdate) SetUpdatedAt(t time.Time) *AssetClassUpdate {
	acu.mutation.SetUpdatedAt(t)
	return acu
}

// SetDeletedBy sets the "deleted_by" field.
func (acu *AssetClassUpdate) SetDeletedBy(s string) *AssetClassUpdate {
	acu.mutation.SetDeletedBy(s)
	return acu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (acu *AssetClassUpdate) SetNillableDeletedBy(s *string) *AssetClassUpdate {
	if s != nil {
		acu.SetDeletedBy(*s)
	}
	return acu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (acu *AssetClassUpdate) ClearDeletedBy() *AssetClassUpdate {
	acu.mutation.ClearDeletedBy()
	return acu
}

// SetDeletedAt sets the "deleted_at" field.
func (acu *AssetClassUpdate) SetDeletedAt(t time.Time) *AssetClassUpdate {
	acu.mutation.SetDeletedAt(t)
	return acu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acu *AssetClassUpdate) SetNillableDeletedAt(t *time.Time) *AssetClassUpdate {
	if t != nil {
		acu.SetDeletedAt(*t)
	}
	return acu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (acu *AssetClassUpdate) ClearDeletedAt() *AssetClassUpdate {
	acu.mutation.ClearDeletedAt()
	return acu
}

// Mutation returns the AssetClassMutation object of the builder.
func (acu *AssetClassUpdate) Mutation() *AssetClassMutation {
	return acu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AssetClassUpdate) Save(ctx context.Context) (int, error) {
	acu.defaults()
	return withHooks(ctx, acu.sqlSave, acu.mutation, acu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AssetClassUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AssetClassUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AssetClassUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acu *AssetClassUpdate) defaults() {
	if _, ok := acu.mutation.UpdatedAt(); !ok {
		v := assetclass.UpdateDefaultUpdatedAt()
		acu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acu *AssetClassUpdate) check() error {
	if v, ok := acu.mutation.Name(); ok {
		if err := assetclass.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AssetClass.name": %w`, err)}
		}
	}
	return nil
}

func (acu *AssetClassUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := acu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(assetclass.Table, assetclass.Columns, sqlgraph.NewFieldSpec(assetclass.FieldID, field.TypeUUID))
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.Order(); ok {
		_spec.SetField(assetclass.FieldOrder, field.TypeInt, value)
	}
	if value, ok := acu.mutation.AddedOrder(); ok {
		_spec.AddField(assetclass.FieldOrder, field.TypeInt, value)
	}
	if value, ok := acu.mutation.Name(); ok {
		_spec.SetField(assetclass.FieldName, field.TypeString, value)
	}
	if value, ok := acu.mutation.Description(); ok {
		_spec.SetField(assetclass.FieldDescription, field.TypeString, value)
	}
	if acu.mutation.DescriptionCleared() {
		_spec.ClearField(assetclass.FieldDescription, field.TypeString)
	}
	if value, ok := acu.mutation.Icon(); ok {
		_spec.SetField(assetclass.FieldIcon, field.TypeString, value)
	}
	if acu.mutation.IconCleared() {
		_spec.ClearField(assetclass.FieldIcon, field.TypeString)
	}
	if value, ok := acu.mutation.Color(); ok {
		_spec.SetField(assetclass.FieldColor, field.TypeString, value)
	}
	if acu.mutation.ColorCleared() {
		_spec.ClearField(assetclass.FieldColor, field.TypeString)
	}
	if value, ok := acu.mutation.Provider(); ok {
		_spec.SetField(assetclass.FieldProvider, field.TypeString, value)
	}
	if acu.mutation.ProviderCleared() {
		_spec.ClearField(assetclass.FieldProvider, field.TypeString)
	}
	if value, ok := acu.mutation.CreatedBy(); ok {
		_spec.SetField(assetclass.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := acu.mutation.UpdatedBy(); ok {
		_spec.SetField(assetclass.FieldUpdatedBy, field.TypeString, value)
	}
	if value, ok := acu.mutation.UpdatedAt(); ok {
		_spec.SetField(assetclass.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := acu.mutation.DeletedBy(); ok {
		_spec.SetField(assetclass.FieldDeletedBy, field.TypeString, value)
	}
	if acu.mutation.DeletedByCleared() {
		_spec.ClearField(assetclass.FieldDeletedBy, field.TypeString)
	}
	if value, ok := acu.mutation.DeletedAt(); ok {
		_spec.SetField(assetclass.FieldDeletedAt, field.TypeTime, value)
	}
	if acu.mutation.DeletedAtCleared() {
		_spec.ClearField(assetclass.FieldDeletedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetclass.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	acu.mutation.done = true
	return n, nil
}

// AssetClassUpdateOne is the builder for updating a single AssetClass entity.
type AssetClassUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AssetClassMutation
}

// SetOrder sets the "order" field.
func (acuo *AssetClassUpdateOne) SetOrder(i int) *AssetClassUpdateOne {
	acuo.mutation.ResetOrder()
	acuo.mutation.SetOrder(i)
	return acuo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (acuo *AssetClassUpdateOne) SetNillableOrder(i *int) *AssetClassUpdateOne {
	if i != nil {
		acuo.SetOrder(*i)
	}
	return acuo
}

// AddOrder adds i to the "order" field.
func (acuo *AssetClassUpdateOne) AddOrder(i int) *AssetClassUpdateOne {
	acuo.mutation.AddOrder(i)
	return acuo
}

// SetName sets the "name" field.
func (acuo *AssetClassUpdateOne) SetName(s string) *AssetClassUpdateOne {
	acuo.mutation.SetName(s)
	return acuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acuo *AssetClassUpdateOne) SetNillableName(s *string) *AssetClassUpdateOne {
	if s != nil {
		acuo.SetName(*s)
	}
	return acuo
}

// SetDescription sets the "description" field.
func (acuo *AssetClassUpdateOne) SetDescription(s string) *AssetClassUpdateOne {
	acuo.mutation.SetDescription(s)
	return acuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (acuo *AssetClassUpdateOne) SetNillableDescription(s *string) *AssetClassUpdateOne {
	if s != nil {
		acuo.SetDescription(*s)
	}
	return acuo
}

// ClearDescription clears the value of the "description" field.
func (acuo *AssetClassUpdateOne) ClearDescription() *AssetClassUpdateOne {
	acuo.mutation.ClearDescription()
	return acuo
}

// SetIcon sets the "icon" field.
func (acuo *AssetClassUpdateOne) SetIcon(s string) *AssetClassUpdateOne {
	acuo.mutation.SetIcon(s)
	return acuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (acuo *AssetClassUpdateOne) SetNillableIcon(s *string) *AssetClassUpdateOne {
	if s != nil {
		acuo.SetIcon(*s)
	}
	return acuo
}

// ClearIcon clears the value of the "icon" field.
func (acuo *AssetClassUpdateOne) ClearIcon() *AssetClassUpdateOne {
	acuo.mutation.ClearIcon()
	return acuo
}

// SetColor sets the "color" field.
func (acuo *AssetClassUpdateOne) SetColor(s string) *AssetClassUpdateOne {
	acuo.mutation.SetColor(s)
	return acuo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (acuo *AssetClassUpdateOne) SetNillableColor(s *string) *AssetClassUpdateOne {
	if s != nil {
		acuo.SetColor(*s)
	}
	return acuo
}

// ClearColor clears the value of the "color" field.
func (acuo *AssetClassUpdateOne) ClearColor() *AssetClassUpdateOne {
	acuo.mutation.ClearColor()
	return acuo
}

// SetProvider sets the "provider" field.
func (acuo *AssetClassUpdateOne) SetProvider(s string) *AssetClassUpdateOne {
	acuo.mutation.SetProvider(s)
	return acuo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (acuo *AssetClassUpdateOne) SetNillableProvider(s *string) *AssetClassUpdateOne {
	if s != nil {
		acuo.SetProvider(*s)
	}
	return acuo
}

// ClearProvider clears the value of the "provider" field.
func (acuo *AssetClassUpdateOne) ClearProvider() *AssetClassUpdateOne {
	acuo.mutation.ClearProvider()
	return acuo
}

// SetCreatedBy sets the "created_by" field.
func (acuo *AssetClassUpdateOne) SetCreatedBy(s string) *AssetClassUpdateOne {
	acuo.mutation.SetCreatedBy(s)
	return acuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (acuo *AssetClassUpdateOne) SetNillableCreatedBy(s *string) *AssetClassUpdateOne {
	if s != nil {
		acuo.SetCreatedBy(*s)
	}
	return acuo
}

// SetUpdatedBy sets the "updated_by" field.
func (acuo *AssetClassUpdateOne) SetUpdatedBy(s string) *AssetClassUpdateOne {
	acuo.mutation.SetUpdatedBy(s)
	return acuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (acuo *AssetClassUpdateOne) SetNillableUpdatedBy(s *string) *AssetClassUpdateOne {
	if s != nil {
		acuo.SetUpdatedBy(*s)
	}
	return acuo
}

// SetUpdatedAt sets the "updated_at" field.
func (acuo *AssetClassUpdateOne) SetUpdatedAt(t time.Time) *AssetClassUpdateOne {
	acuo.mutation.SetUpdatedAt(t)
	return acuo
}

// SetDeletedBy sets the "deleted_by" field.
func (acuo *AssetClassUpdateOne) SetDeletedBy(s string) *AssetClassUpdateOne {
	acuo.mutation.SetDeletedBy(s)
	return acuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (acuo *AssetClassUpdateOne) SetNillableDeletedBy(s *string) *AssetClassUpdateOne {
	if s != nil {
		acuo.SetDeletedBy(*s)
	}
	return acuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (acuo *AssetClassUpdateOne) ClearDeletedBy() *AssetClassUpdateOne {
	acuo.mutation.ClearDeletedBy()
	return acuo
}

// SetDeletedAt sets the "deleted_at" field.
func (acuo *AssetClassUpdateOne) SetDeletedAt(t time.Time) *AssetClassUpdateOne {
	acuo.mutation.SetDeletedAt(t)
	return acuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acuo *AssetClassUpdateOne) SetNillableDeletedAt(t *time.Time) *AssetClassUpdateOne {
	if t != nil {
		acuo.SetDeletedAt(*t)
	}
	return acuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (acuo *AssetClassUpdateOne) ClearDeletedAt() *AssetClassUpdateOne {
	acuo.mutation.ClearDeletedAt()
	return acuo
}

// Mutation returns the AssetClassMutation object of the builder.
func (acuo *AssetClassUpdateOne) Mutation() *AssetClassMutation {
	return acuo.mutation
}

// Where appends a list predicates to the AssetClassUpdate builder.
func (acuo *AssetClassUpdateOne) Where(ps ...predicate.AssetClass) *AssetClassUpdateOne {
	acuo.mutation.Where(ps...)
	return acuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AssetClassUpdateOne) Select(field string, fields ...string) *AssetClassUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AssetClass entity.
func (acuo *AssetClassUpdateOne) Save(ctx context.Context) (*AssetClass, error) {
	acuo.defaults()
	return withHooks(ctx, acuo.sqlSave, acuo.mutation, acuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AssetClassUpdateOne) SaveX(ctx context.Context) *AssetClass {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AssetClassUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AssetClassUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acuo *AssetClassUpdateOne) defaults() {
	if _, ok := acuo.mutation.UpdatedAt(); !ok {
		v := assetclass.UpdateDefaultUpdatedAt()
		acuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acuo *AssetClassUpdateOne) check() error {
	if v, ok := acuo.mutation.Name(); ok {
		if err := assetclass.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AssetClass.name": %w`, err)}
		}
	}
	return nil
}

func (acuo *AssetClassUpdateOne) sqlSave(ctx context.Context) (_node *AssetClass, err error) {
	if err := acuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(assetclass.Table, assetclass.Columns, sqlgraph.NewFieldSpec(assetclass.FieldID, field.TypeUUID))
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssetClass.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assetclass.FieldID)
		for _, f := range fields {
			if !assetclass.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assetclass.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.Order(); ok {
		_spec.SetField(assetclass.FieldOrder, field.TypeInt, value)
	}
	if value, ok := acuo.mutation.AddedOrder(); ok {
		_spec.AddField(assetclass.FieldOrder, field.TypeInt, value)
	}
	if value, ok := acuo.mutation.Name(); ok {
		_spec.SetField(assetclass.FieldName, field.TypeString, value)
	}
	if value, ok := acuo.mutation.Description(); ok {
		_spec.SetField(assetclass.FieldDescription, field.TypeString, value)
	}
	if acuo.mutation.DescriptionCleared() {
		_spec.ClearField(assetclass.FieldDescription, field.TypeString)
	}
	if value, ok := acuo.mutation.Icon(); ok {
		_spec.SetField(assetclass.FieldIcon, field.TypeString, value)
	}
	if acuo.mutation.IconCleared() {
		_spec.ClearField(assetclass.FieldIcon, field.TypeString)
	}
	if value, ok := acuo.mutation.Color(); ok {
		_spec.SetField(assetclass.FieldColor, field.TypeString, value)
	}
	if acuo.mutation.ColorCleared() {
		_spec.ClearField(assetclass.FieldColor, field.TypeString)
	}
	if value, ok := acuo.mutation.Provider(); ok {
		_spec.SetField(assetclass.FieldProvider, field.TypeString, value)
	}
	if acuo.mutation.ProviderCleared() {
		_spec.ClearField(assetclass.FieldProvider, field.TypeString)
	}
	if value, ok := acuo.mutation.CreatedBy(); ok {
		_spec.SetField(assetclass.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := acuo.mutation.UpdatedBy(); ok {
		_spec.SetField(assetclass.FieldUpdatedBy, field.TypeString, value)
	}
	if value, ok := acuo.mutation.UpdatedAt(); ok {
		_spec.SetField(assetclass.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := acuo.mutation.DeletedBy(); ok {
		_spec.SetField(assetclass.FieldDeletedBy, field.TypeString, value)
	}
	if acuo.mutation.DeletedByCleared() {
		_spec.ClearField(assetclass.FieldDeletedBy, field.TypeString)
	}
	if value, ok := acuo.mutation.DeletedAt(); ok {
		_spec.SetField(assetclass.FieldDeletedAt, field.TypeTime, value)
	}
	if acuo.mutation.DeletedAtCleared() {
		_spec.ClearField(assetclass.FieldDeletedAt, field.TypeTime)
	}
	_node = &AssetClass{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetclass.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	acuo.mutation.done = true
	return _node, nil
}
