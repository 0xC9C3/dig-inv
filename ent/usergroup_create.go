// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dig-inv/ent/item"
	"dig-inv/ent/usergroup"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserGroupCreate is the builder for creating a UserGroup entity.
type UserGroupCreate struct {
	config
	mutation *UserGroupMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ugc *UserGroupCreate) SetName(s string) *UserGroupCreate {
	ugc.mutation.SetName(s)
	return ugc
}

// SetDescription sets the "description" field.
func (ugc *UserGroupCreate) SetDescription(s string) *UserGroupCreate {
	ugc.mutation.SetDescription(s)
	return ugc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ugc *UserGroupCreate) SetNillableDescription(s *string) *UserGroupCreate {
	if s != nil {
		ugc.SetDescription(*s)
	}
	return ugc
}

// SetOidcScope sets the "oidc_scope" field.
func (ugc *UserGroupCreate) SetOidcScope(s string) *UserGroupCreate {
	ugc.mutation.SetOidcScope(s)
	return ugc
}

// SetCreatedBy sets the "created_by" field.
func (ugc *UserGroupCreate) SetCreatedBy(s string) *UserGroupCreate {
	ugc.mutation.SetCreatedBy(s)
	return ugc
}

// SetCreatedAt sets the "created_at" field.
func (ugc *UserGroupCreate) SetCreatedAt(t time.Time) *UserGroupCreate {
	ugc.mutation.SetCreatedAt(t)
	return ugc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ugc *UserGroupCreate) SetNillableCreatedAt(t *time.Time) *UserGroupCreate {
	if t != nil {
		ugc.SetCreatedAt(*t)
	}
	return ugc
}

// SetUpdatedBy sets the "updated_by" field.
func (ugc *UserGroupCreate) SetUpdatedBy(s string) *UserGroupCreate {
	ugc.mutation.SetUpdatedBy(s)
	return ugc
}

// SetUpdatedAt sets the "updated_at" field.
func (ugc *UserGroupCreate) SetUpdatedAt(t time.Time) *UserGroupCreate {
	ugc.mutation.SetUpdatedAt(t)
	return ugc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ugc *UserGroupCreate) SetNillableUpdatedAt(t *time.Time) *UserGroupCreate {
	if t != nil {
		ugc.SetUpdatedAt(*t)
	}
	return ugc
}

// SetDeletedBy sets the "deleted_by" field.
func (ugc *UserGroupCreate) SetDeletedBy(s string) *UserGroupCreate {
	ugc.mutation.SetDeletedBy(s)
	return ugc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ugc *UserGroupCreate) SetNillableDeletedBy(s *string) *UserGroupCreate {
	if s != nil {
		ugc.SetDeletedBy(*s)
	}
	return ugc
}

// SetDeletedAt sets the "deleted_at" field.
func (ugc *UserGroupCreate) SetDeletedAt(t time.Time) *UserGroupCreate {
	ugc.mutation.SetDeletedAt(t)
	return ugc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ugc *UserGroupCreate) SetNillableDeletedAt(t *time.Time) *UserGroupCreate {
	if t != nil {
		ugc.SetDeletedAt(*t)
	}
	return ugc
}

// SetID sets the "id" field.
func (ugc *UserGroupCreate) SetID(u uuid.UUID) *UserGroupCreate {
	ugc.mutation.SetID(u)
	return ugc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ugc *UserGroupCreate) SetNillableID(u *uuid.UUID) *UserGroupCreate {
	if u != nil {
		ugc.SetID(*u)
	}
	return ugc
}

// AddItemIDs adds the "items" edge to the Item entity by IDs.
func (ugc *UserGroupCreate) AddItemIDs(ids ...uuid.UUID) *UserGroupCreate {
	ugc.mutation.AddItemIDs(ids...)
	return ugc
}

// AddItems adds the "items" edges to the Item entity.
func (ugc *UserGroupCreate) AddItems(i ...*Item) *UserGroupCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ugc.AddItemIDs(ids...)
}

// Mutation returns the UserGroupMutation object of the builder.
func (ugc *UserGroupCreate) Mutation() *UserGroupMutation {
	return ugc.mutation
}

// Save creates the UserGroup in the database.
func (ugc *UserGroupCreate) Save(ctx context.Context) (*UserGroup, error) {
	ugc.defaults()
	return withHooks(ctx, ugc.sqlSave, ugc.mutation, ugc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ugc *UserGroupCreate) SaveX(ctx context.Context) *UserGroup {
	v, err := ugc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ugc *UserGroupCreate) Exec(ctx context.Context) error {
	_, err := ugc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ugc *UserGroupCreate) ExecX(ctx context.Context) {
	if err := ugc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ugc *UserGroupCreate) defaults() {
	if _, ok := ugc.mutation.CreatedAt(); !ok {
		v := usergroup.DefaultCreatedAt()
		ugc.mutation.SetCreatedAt(v)
	}
	if _, ok := ugc.mutation.UpdatedAt(); !ok {
		v := usergroup.DefaultUpdatedAt()
		ugc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ugc.mutation.ID(); !ok {
		v := usergroup.DefaultID()
		ugc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ugc *UserGroupCreate) check() error {
	if _, ok := ugc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "UserGroup.name"`)}
	}
	if v, ok := ugc.mutation.Name(); ok {
		if err := usergroup.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "UserGroup.name": %w`, err)}
		}
	}
	if _, ok := ugc.mutation.OidcScope(); !ok {
		return &ValidationError{Name: "oidc_scope", err: errors.New(`ent: missing required field "UserGroup.oidc_scope"`)}
	}
	if v, ok := ugc.mutation.OidcScope(); ok {
		if err := usergroup.OidcScopeValidator(v); err != nil {
			return &ValidationError{Name: "oidc_scope", err: fmt.Errorf(`ent: validator failed for field "UserGroup.oidc_scope": %w`, err)}
		}
	}
	if _, ok := ugc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "UserGroup.created_by"`)}
	}
	if _, ok := ugc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserGroup.created_at"`)}
	}
	if _, ok := ugc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "UserGroup.updated_by"`)}
	}
	if _, ok := ugc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserGroup.updated_at"`)}
	}
	return nil
}

func (ugc *UserGroupCreate) sqlSave(ctx context.Context) (*UserGroup, error) {
	if err := ugc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ugc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ugc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ugc.mutation.id = &_node.ID
	ugc.mutation.done = true
	return _node, nil
}

func (ugc *UserGroupCreate) createSpec() (*UserGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &UserGroup{config: ugc.config}
		_spec = sqlgraph.NewCreateSpec(usergroup.Table, sqlgraph.NewFieldSpec(usergroup.FieldID, field.TypeUUID))
	)
	if id, ok := ugc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ugc.mutation.Name(); ok {
		_spec.SetField(usergroup.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ugc.mutation.Description(); ok {
		_spec.SetField(usergroup.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ugc.mutation.OidcScope(); ok {
		_spec.SetField(usergroup.FieldOidcScope, field.TypeString, value)
		_node.OidcScope = value
	}
	if value, ok := ugc.mutation.CreatedBy(); ok {
		_spec.SetField(usergroup.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := ugc.mutation.CreatedAt(); ok {
		_spec.SetField(usergroup.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ugc.mutation.UpdatedBy(); ok {
		_spec.SetField(usergroup.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := ugc.mutation.UpdatedAt(); ok {
		_spec.SetField(usergroup.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ugc.mutation.DeletedBy(); ok {
		_spec.SetField(usergroup.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := ugc.mutation.DeletedAt(); ok {
		_spec.SetField(usergroup.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := ugc.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usergroup.ItemsTable,
			Columns: []string{usergroup.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserGroupCreateBulk is the builder for creating many UserGroup entities in bulk.
type UserGroupCreateBulk struct {
	config
	err      error
	builders []*UserGroupCreate
}

// Save creates the UserGroup entities in the database.
func (ugcb *UserGroupCreateBulk) Save(ctx context.Context) ([]*UserGroup, error) {
	if ugcb.err != nil {
		return nil, ugcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ugcb.builders))
	nodes := make([]*UserGroup, len(ugcb.builders))
	mutators := make([]Mutator, len(ugcb.builders))
	for i := range ugcb.builders {
		func(i int, root context.Context) {
			builder := ugcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ugcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ugcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ugcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ugcb *UserGroupCreateBulk) SaveX(ctx context.Context) []*UserGroup {
	v, err := ugcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ugcb *UserGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := ugcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ugcb *UserGroupCreateBulk) ExecX(ctx context.Context) {
	if err := ugcb.Exec(ctx); err != nil {
		panic(err)
	}
}
