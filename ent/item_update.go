// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dig-inv/ent/item"
	"dig-inv/ent/predicate"
	"dig-inv/ent/tag"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ItemUpdate is the builder for updating Item entities.
type ItemUpdate struct {
	config
	hooks    []Hook
	mutation *ItemMutation
}

// Where appends a list predicates to the ItemUpdate builder.
func (iu *ItemUpdate) Where(ps ...predicate.Item) *ItemUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetName sets the "name" field.
func (iu *ItemUpdate) SetName(s string) *ItemUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableName(s *string) *ItemUpdate {
	if s != nil {
		iu.SetName(*s)
	}
	return iu
}

// SetDescription sets the "description" field.
func (iu *ItemUpdate) SetDescription(s string) *ItemUpdate {
	iu.mutation.SetDescription(s)
	return iu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableDescription(s *string) *ItemUpdate {
	if s != nil {
		iu.SetDescription(*s)
	}
	return iu
}

// ClearDescription clears the value of the "description" field.
func (iu *ItemUpdate) ClearDescription() *ItemUpdate {
	iu.mutation.ClearDescription()
	return iu
}

// SetType sets the "type" field.
func (iu *ItemUpdate) SetType(s string) *ItemUpdate {
	iu.mutation.SetType(s)
	return iu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableType(s *string) *ItemUpdate {
	if s != nil {
		iu.SetType(*s)
	}
	return iu
}

// SetProvider sets the "provider" field.
func (iu *ItemUpdate) SetProvider(s string) *ItemUpdate {
	iu.mutation.SetProvider(s)
	return iu
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableProvider(s *string) *ItemUpdate {
	if s != nil {
		iu.SetProvider(*s)
	}
	return iu
}

// SetCreatedBy sets the "created_by" field.
func (iu *ItemUpdate) SetCreatedBy(s string) *ItemUpdate {
	iu.mutation.SetCreatedBy(s)
	return iu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableCreatedBy(s *string) *ItemUpdate {
	if s != nil {
		iu.SetCreatedBy(*s)
	}
	return iu
}

// SetUpdatedBy sets the "updated_by" field.
func (iu *ItemUpdate) SetUpdatedBy(s string) *ItemUpdate {
	iu.mutation.SetUpdatedBy(s)
	return iu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableUpdatedBy(s *string) *ItemUpdate {
	if s != nil {
		iu.SetUpdatedBy(*s)
	}
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *ItemUpdate) SetUpdatedAt(t time.Time) *ItemUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetDeletedBy sets the "deleted_by" field.
func (iu *ItemUpdate) SetDeletedBy(s string) *ItemUpdate {
	iu.mutation.SetDeletedBy(s)
	return iu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableDeletedBy(s *string) *ItemUpdate {
	if s != nil {
		iu.SetDeletedBy(*s)
	}
	return iu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (iu *ItemUpdate) ClearDeletedBy() *ItemUpdate {
	iu.mutation.ClearDeletedBy()
	return iu
}

// SetDeletedAt sets the "deleted_at" field.
func (iu *ItemUpdate) SetDeletedAt(t time.Time) *ItemUpdate {
	iu.mutation.SetDeletedAt(t)
	return iu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableDeletedAt(t *time.Time) *ItemUpdate {
	if t != nil {
		iu.SetDeletedAt(*t)
	}
	return iu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iu *ItemUpdate) ClearDeletedAt() *ItemUpdate {
	iu.mutation.ClearDeletedAt()
	return iu
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (iu *ItemUpdate) AddTagIDs(ids ...uuid.UUID) *ItemUpdate {
	iu.mutation.AddTagIDs(ids...)
	return iu
}

// AddTags adds the "tags" edges to the Tag entity.
func (iu *ItemUpdate) AddTags(t ...*Tag) *ItemUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iu.AddTagIDs(ids...)
}

// Mutation returns the ItemMutation object of the builder.
func (iu *ItemUpdate) Mutation() *ItemMutation {
	return iu.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (iu *ItemUpdate) ClearTags() *ItemUpdate {
	iu.mutation.ClearTags()
	return iu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (iu *ItemUpdate) RemoveTagIDs(ids ...uuid.UUID) *ItemUpdate {
	iu.mutation.RemoveTagIDs(ids...)
	return iu
}

// RemoveTags removes "tags" edges to Tag entities.
func (iu *ItemUpdate) RemoveTags(t ...*Tag) *ItemUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iu.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ItemUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ItemUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ItemUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ItemUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *ItemUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := item.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *ItemUpdate) check() error {
	if v, ok := iu.mutation.Name(); ok {
		if err := item.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Item.name": %w`, err)}
		}
	}
	if v, ok := iu.mutation.GetType(); ok {
		if err := item.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Item.type": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Provider(); ok {
		if err := item.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "Item.provider": %w`, err)}
		}
	}
	return nil
}

func (iu *ItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(item.Table, item.Columns, sqlgraph.NewFieldSpec(item.FieldID, field.TypeUUID))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(item.FieldName, field.TypeString, value)
	}
	if value, ok := iu.mutation.Description(); ok {
		_spec.SetField(item.FieldDescription, field.TypeString, value)
	}
	if iu.mutation.DescriptionCleared() {
		_spec.ClearField(item.FieldDescription, field.TypeString)
	}
	if value, ok := iu.mutation.GetType(); ok {
		_spec.SetField(item.FieldType, field.TypeString, value)
	}
	if value, ok := iu.mutation.Provider(); ok {
		_spec.SetField(item.FieldProvider, field.TypeString, value)
	}
	if value, ok := iu.mutation.CreatedBy(); ok {
		_spec.SetField(item.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := iu.mutation.UpdatedBy(); ok {
		_spec.SetField(item.FieldUpdatedBy, field.TypeString, value)
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(item.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.DeletedBy(); ok {
		_spec.SetField(item.FieldDeletedBy, field.TypeString, value)
	}
	if iu.mutation.DeletedByCleared() {
		_spec.ClearField(item.FieldDeletedBy, field.TypeString)
	}
	if value, ok := iu.mutation.DeletedAt(); ok {
		_spec.SetField(item.FieldDeletedAt, field.TypeTime, value)
	}
	if iu.mutation.DeletedAtCleared() {
		_spec.ClearField(item.FieldDeletedAt, field.TypeTime)
	}
	if iu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.TagsTable,
			Columns: []string{item.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !iu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.TagsTable,
			Columns: []string{item.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.TagsTable,
			Columns: []string{item.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{item.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// ItemUpdateOne is the builder for updating a single Item entity.
type ItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ItemMutation
}

// SetName sets the "name" field.
func (iuo *ItemUpdateOne) SetName(s string) *ItemUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableName(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetName(*s)
	}
	return iuo
}

// SetDescription sets the "description" field.
func (iuo *ItemUpdateOne) SetDescription(s string) *ItemUpdateOne {
	iuo.mutation.SetDescription(s)
	return iuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableDescription(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetDescription(*s)
	}
	return iuo
}

// ClearDescription clears the value of the "description" field.
func (iuo *ItemUpdateOne) ClearDescription() *ItemUpdateOne {
	iuo.mutation.ClearDescription()
	return iuo
}

// SetType sets the "type" field.
func (iuo *ItemUpdateOne) SetType(s string) *ItemUpdateOne {
	iuo.mutation.SetType(s)
	return iuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableType(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetType(*s)
	}
	return iuo
}

// SetProvider sets the "provider" field.
func (iuo *ItemUpdateOne) SetProvider(s string) *ItemUpdateOne {
	iuo.mutation.SetProvider(s)
	return iuo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableProvider(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetProvider(*s)
	}
	return iuo
}

// SetCreatedBy sets the "created_by" field.
func (iuo *ItemUpdateOne) SetCreatedBy(s string) *ItemUpdateOne {
	iuo.mutation.SetCreatedBy(s)
	return iuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableCreatedBy(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetCreatedBy(*s)
	}
	return iuo
}

// SetUpdatedBy sets the "updated_by" field.
func (iuo *ItemUpdateOne) SetUpdatedBy(s string) *ItemUpdateOne {
	iuo.mutation.SetUpdatedBy(s)
	return iuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableUpdatedBy(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetUpdatedBy(*s)
	}
	return iuo
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *ItemUpdateOne) SetUpdatedAt(t time.Time) *ItemUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetDeletedBy sets the "deleted_by" field.
func (iuo *ItemUpdateOne) SetDeletedBy(s string) *ItemUpdateOne {
	iuo.mutation.SetDeletedBy(s)
	return iuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableDeletedBy(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetDeletedBy(*s)
	}
	return iuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (iuo *ItemUpdateOne) ClearDeletedBy() *ItemUpdateOne {
	iuo.mutation.ClearDeletedBy()
	return iuo
}

// SetDeletedAt sets the "deleted_at" field.
func (iuo *ItemUpdateOne) SetDeletedAt(t time.Time) *ItemUpdateOne {
	iuo.mutation.SetDeletedAt(t)
	return iuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableDeletedAt(t *time.Time) *ItemUpdateOne {
	if t != nil {
		iuo.SetDeletedAt(*t)
	}
	return iuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iuo *ItemUpdateOne) ClearDeletedAt() *ItemUpdateOne {
	iuo.mutation.ClearDeletedAt()
	return iuo
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (iuo *ItemUpdateOne) AddTagIDs(ids ...uuid.UUID) *ItemUpdateOne {
	iuo.mutation.AddTagIDs(ids...)
	return iuo
}

// AddTags adds the "tags" edges to the Tag entity.
func (iuo *ItemUpdateOne) AddTags(t ...*Tag) *ItemUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iuo.AddTagIDs(ids...)
}

// Mutation returns the ItemMutation object of the builder.
func (iuo *ItemUpdateOne) Mutation() *ItemMutation {
	return iuo.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (iuo *ItemUpdateOne) ClearTags() *ItemUpdateOne {
	iuo.mutation.ClearTags()
	return iuo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (iuo *ItemUpdateOne) RemoveTagIDs(ids ...uuid.UUID) *ItemUpdateOne {
	iuo.mutation.RemoveTagIDs(ids...)
	return iuo
}

// RemoveTags removes "tags" edges to Tag entities.
func (iuo *ItemUpdateOne) RemoveTags(t ...*Tag) *ItemUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iuo.RemoveTagIDs(ids...)
}

// Where appends a list predicates to the ItemUpdate builder.
func (iuo *ItemUpdateOne) Where(ps ...predicate.Item) *ItemUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *ItemUpdateOne) Select(field string, fields ...string) *ItemUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Item entity.
func (iuo *ItemUpdateOne) Save(ctx context.Context) (*Item, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ItemUpdateOne) SaveX(ctx context.Context) *Item {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ItemUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ItemUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *ItemUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := item.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *ItemUpdateOne) check() error {
	if v, ok := iuo.mutation.Name(); ok {
		if err := item.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Item.name": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.GetType(); ok {
		if err := item.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Item.type": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Provider(); ok {
		if err := item.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "Item.provider": %w`, err)}
		}
	}
	return nil
}

func (iuo *ItemUpdateOne) sqlSave(ctx context.Context) (_node *Item, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(item.Table, item.Columns, sqlgraph.NewFieldSpec(item.FieldID, field.TypeUUID))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Item.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, item.FieldID)
		for _, f := range fields {
			if !item.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != item.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(item.FieldName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Description(); ok {
		_spec.SetField(item.FieldDescription, field.TypeString, value)
	}
	if iuo.mutation.DescriptionCleared() {
		_spec.ClearField(item.FieldDescription, field.TypeString)
	}
	if value, ok := iuo.mutation.GetType(); ok {
		_spec.SetField(item.FieldType, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Provider(); ok {
		_spec.SetField(item.FieldProvider, field.TypeString, value)
	}
	if value, ok := iuo.mutation.CreatedBy(); ok {
		_spec.SetField(item.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := iuo.mutation.UpdatedBy(); ok {
		_spec.SetField(item.FieldUpdatedBy, field.TypeString, value)
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(item.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.DeletedBy(); ok {
		_spec.SetField(item.FieldDeletedBy, field.TypeString, value)
	}
	if iuo.mutation.DeletedByCleared() {
		_spec.ClearField(item.FieldDeletedBy, field.TypeString)
	}
	if value, ok := iuo.mutation.DeletedAt(); ok {
		_spec.SetField(item.FieldDeletedAt, field.TypeTime, value)
	}
	if iuo.mutation.DeletedAtCleared() {
		_spec.ClearField(item.FieldDeletedAt, field.TypeTime)
	}
	if iuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.TagsTable,
			Columns: []string{item.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !iuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.TagsTable,
			Columns: []string{item.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.TagsTable,
			Columns: []string{item.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Item{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{item.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
