/* tslint:disable */
/* eslint-disable */
/**
 * backend.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RpcStatus,
  V1StringMessage,
} from '../models/index';
import {
    RpcStatusFromJSON,
    RpcStatusToJSON,
    V1StringMessageFromJSON,
    V1StringMessageToJSON,
} from '../models/index';

export interface YourServiceEchoRequest {
    body: V1StringMessage;
}

/**
 * 
 */
export class YourServiceApi extends runtime.BaseAPI {

    /**
     */
    async yourServiceEchoRaw(requestParameters: YourServiceEchoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1StringMessage>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling yourServiceEcho().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/your.service.v1.YourService/Echo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1StringMessageToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StringMessageFromJSON(jsonValue));
    }

    /**
     */
    async yourServiceEcho(requestParameters: YourServiceEchoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1StringMessage> {
        const response = await this.yourServiceEchoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
