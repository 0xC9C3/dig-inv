/* tslint:disable */
/* eslint-disable */
/**
 * backend.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DigInvAuthUrlMessage,
  DigInvExchangeCodeMessage,
  DigInvUserInfoMessage,
  RpcStatus,
} from '../models/index';
import {
    DigInvAuthUrlMessageFromJSON,
    DigInvAuthUrlMessageToJSON,
    DigInvExchangeCodeMessageFromJSON,
    DigInvExchangeCodeMessageToJSON,
    DigInvUserInfoMessageFromJSON,
    DigInvUserInfoMessageToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models/index';

export interface OpenIdAuthServiceBeginAuthRequest {
    body: object;
}

export interface OpenIdAuthServiceExchangeCodeRequest {
    body: DigInvExchangeCodeMessage;
}

export interface OpenIdAuthServiceGetUserInfoRequest {
    body: object;
}

export interface OpenIdAuthServiceLogoutRequest {
    body: object;
}

/**
 * 
 */
export class OpenIdAuthServiceApi extends runtime.BaseAPI {

    /**
     */
    async openIdAuthServiceBeginAuthRaw(requestParameters: OpenIdAuthServiceBeginAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DigInvAuthUrlMessage>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling openIdAuthServiceBeginAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dig_inv.OpenIdAuthService/BeginAuth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DigInvAuthUrlMessageFromJSON(jsonValue));
    }

    /**
     */
    async openIdAuthServiceBeginAuth(requestParameters: OpenIdAuthServiceBeginAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DigInvAuthUrlMessage> {
        const response = await this.openIdAuthServiceBeginAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async openIdAuthServiceExchangeCodeRaw(requestParameters: OpenIdAuthServiceExchangeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling openIdAuthServiceExchangeCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dig_inv.OpenIdAuthService/ExchangeCode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DigInvExchangeCodeMessageToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async openIdAuthServiceExchangeCode(requestParameters: OpenIdAuthServiceExchangeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.openIdAuthServiceExchangeCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async openIdAuthServiceGetUserInfoRaw(requestParameters: OpenIdAuthServiceGetUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DigInvUserInfoMessage>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling openIdAuthServiceGetUserInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dig_inv.OpenIdAuthService/GetUserInfo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DigInvUserInfoMessageFromJSON(jsonValue));
    }

    /**
     */
    async openIdAuthServiceGetUserInfo(requestParameters: OpenIdAuthServiceGetUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DigInvUserInfoMessage> {
        const response = await this.openIdAuthServiceGetUserInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async openIdAuthServiceLogoutRaw(requestParameters: OpenIdAuthServiceLogoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling openIdAuthServiceLogout().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dig_inv.OpenIdAuthService/Logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async openIdAuthServiceLogout(requestParameters: OpenIdAuthServiceLogoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.openIdAuthServiceLogoutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
