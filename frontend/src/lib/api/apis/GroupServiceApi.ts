/* tslint:disable */
/* eslint-disable */
/**
 * backend.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RpcStatus,
  V1ElementId,
  V1Group,
  V1Groups,
} from '../models/index';
import {
    RpcStatusFromJSON,
    RpcStatusToJSON,
    V1ElementIdFromJSON,
    V1ElementIdToJSON,
    V1GroupFromJSON,
    V1GroupToJSON,
    V1GroupsFromJSON,
    V1GroupsToJSON,
} from '../models/index';

export interface GroupServiceAddItemToGroupRequest {
    body: V1ElementId;
}

export interface GroupServiceCreateGroupRequest {
    body: V1Group;
}

export interface GroupServiceDeleteGroupRequest {
    body: V1ElementId;
}

export interface GroupServiceGetGroupRequest {
    body: object;
}

export interface GroupServiceGetGroupsRequest {
    body: object;
}

export interface GroupServiceUpdateGroupRequest {
    body: V1Group;
}

/**
 * 
 */
export class GroupServiceApi extends runtime.BaseAPI {

    /**
     */
    async groupServiceAddItemToGroupRaw(requestParameters: GroupServiceAddItemToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling groupServiceAddItemToGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/your.service.v1.GroupService/AddItemToGroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1ElementIdToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async groupServiceAddItemToGroup(requestParameters: GroupServiceAddItemToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.groupServiceAddItemToGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupServiceCreateGroupRaw(requestParameters: GroupServiceCreateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Group>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling groupServiceCreateGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/your.service.v1.GroupService/CreateGroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1GroupToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GroupFromJSON(jsonValue));
    }

    /**
     */
    async groupServiceCreateGroup(requestParameters: GroupServiceCreateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Group> {
        const response = await this.groupServiceCreateGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupServiceDeleteGroupRaw(requestParameters: GroupServiceDeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling groupServiceDeleteGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/your.service.v1.GroupService/DeleteGroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1ElementIdToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async groupServiceDeleteGroup(requestParameters: GroupServiceDeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.groupServiceDeleteGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupServiceGetGroupRaw(requestParameters: GroupServiceGetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Group>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling groupServiceGetGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/your.service.v1.GroupService/GetGroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GroupFromJSON(jsonValue));
    }

    /**
     */
    async groupServiceGetGroup(requestParameters: GroupServiceGetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Group> {
        const response = await this.groupServiceGetGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupServiceGetGroupsRaw(requestParameters: GroupServiceGetGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Groups>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling groupServiceGetGroups().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/your.service.v1.GroupService/GetGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GroupsFromJSON(jsonValue));
    }

    /**
     */
    async groupServiceGetGroups(requestParameters: GroupServiceGetGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Groups> {
        const response = await this.groupServiceGetGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupServiceUpdateGroupRaw(requestParameters: GroupServiceUpdateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Group>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling groupServiceUpdateGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/your.service.v1.GroupService/UpdateGroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1GroupToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GroupFromJSON(jsonValue));
    }

    /**
     */
    async groupServiceUpdateGroup(requestParameters: GroupServiceUpdateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Group> {
        const response = await this.groupServiceUpdateGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
