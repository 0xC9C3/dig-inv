/* tslint:disable */
/* eslint-disable */
/**
 * backend.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RpcStatus,
  V1ElementId,
  V1Tag,
  V1Tags,
} from '../models/index';
import {
    RpcStatusFromJSON,
    RpcStatusToJSON,
    V1ElementIdFromJSON,
    V1ElementIdToJSON,
    V1TagFromJSON,
    V1TagToJSON,
    V1TagsFromJSON,
    V1TagsToJSON,
} from '../models/index';

export interface TagServiceAddItemToTagRequest {
    body: V1ElementId;
}

export interface TagServiceCreateTagRequest {
    body: V1Tag;
}

export interface TagServiceDeleteTagRequest {
    body: V1ElementId;
}

export interface TagServiceGetTagRequest {
    body: object;
}

export interface TagServiceGetTagsRequest {
    body: object;
}

export interface TagServiceUpdateTagRequest {
    body: V1Tag;
}

/**
 * 
 */
export class TagServiceApi extends runtime.BaseAPI {

    /**
     */
    async tagServiceAddItemToTagRaw(requestParameters: TagServiceAddItemToTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling tagServiceAddItemToTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/your.service.v1.TagService/AddItemToTag`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1ElementIdToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async tagServiceAddItemToTag(requestParameters: TagServiceAddItemToTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.tagServiceAddItemToTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tagServiceCreateTagRaw(requestParameters: TagServiceCreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Tag>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling tagServiceCreateTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/your.service.v1.TagService/CreateTag`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1TagToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1TagFromJSON(jsonValue));
    }

    /**
     */
    async tagServiceCreateTag(requestParameters: TagServiceCreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Tag> {
        const response = await this.tagServiceCreateTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tagServiceDeleteTagRaw(requestParameters: TagServiceDeleteTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling tagServiceDeleteTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/your.service.v1.TagService/DeleteTag`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1ElementIdToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async tagServiceDeleteTag(requestParameters: TagServiceDeleteTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.tagServiceDeleteTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tagServiceGetTagRaw(requestParameters: TagServiceGetTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Tag>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling tagServiceGetTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/your.service.v1.TagService/GetTag`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1TagFromJSON(jsonValue));
    }

    /**
     */
    async tagServiceGetTag(requestParameters: TagServiceGetTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Tag> {
        const response = await this.tagServiceGetTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tagServiceGetTagsRaw(requestParameters: TagServiceGetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Tags>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling tagServiceGetTags().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/your.service.v1.TagService/GetTags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1TagsFromJSON(jsonValue));
    }

    /**
     */
    async tagServiceGetTags(requestParameters: TagServiceGetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Tags> {
        const response = await this.tagServiceGetTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tagServiceUpdateTagRaw(requestParameters: TagServiceUpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Tag>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling tagServiceUpdateTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/your.service.v1.TagService/UpdateTag`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1TagToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1TagFromJSON(jsonValue));
    }

    /**
     */
    async tagServiceUpdateTag(requestParameters: TagServiceUpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Tag> {
        const response = await this.tagServiceUpdateTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
