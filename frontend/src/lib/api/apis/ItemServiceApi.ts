/* tslint:disable */
/* eslint-disable */
/**
 * backend.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DigInvElementId,
  DigInvItem,
  DigInvItems,
  RpcStatus,
} from '../models/index';
import {
    DigInvElementIdFromJSON,
    DigInvElementIdToJSON,
    DigInvItemFromJSON,
    DigInvItemToJSON,
    DigInvItemsFromJSON,
    DigInvItemsToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models/index';

export interface ItemServiceCreateItemRequest {
    body: DigInvItem;
}

export interface ItemServiceDeleteItemRequest {
    body: DigInvElementId;
}

export interface ItemServiceGetItemRequest {
    body: object;
}

export interface ItemServiceGetItemsRequest {
    body: object;
}

export interface ItemServiceUpdateItemRequest {
    body: DigInvItem;
}

/**
 * 
 */
export class ItemServiceApi extends runtime.BaseAPI {

    /**
     */
    async itemServiceCreateItemRaw(requestParameters: ItemServiceCreateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DigInvItem>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling itemServiceCreateItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dig_inv.ItemService/CreateItem`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DigInvItemToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DigInvItemFromJSON(jsonValue));
    }

    /**
     */
    async itemServiceCreateItem(requestParameters: ItemServiceCreateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DigInvItem> {
        const response = await this.itemServiceCreateItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async itemServiceDeleteItemRaw(requestParameters: ItemServiceDeleteItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling itemServiceDeleteItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dig_inv.ItemService/DeleteItem`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DigInvElementIdToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async itemServiceDeleteItem(requestParameters: ItemServiceDeleteItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.itemServiceDeleteItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async itemServiceGetItemRaw(requestParameters: ItemServiceGetItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DigInvItem>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling itemServiceGetItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dig_inv.ItemService/GetItem`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DigInvItemFromJSON(jsonValue));
    }

    /**
     */
    async itemServiceGetItem(requestParameters: ItemServiceGetItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DigInvItem> {
        const response = await this.itemServiceGetItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async itemServiceGetItemsRaw(requestParameters: ItemServiceGetItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DigInvItems>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling itemServiceGetItems().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dig_inv.ItemService/GetItems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DigInvItemsFromJSON(jsonValue));
    }

    /**
     */
    async itemServiceGetItems(requestParameters: ItemServiceGetItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DigInvItems> {
        const response = await this.itemServiceGetItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async itemServiceUpdateItemRaw(requestParameters: ItemServiceUpdateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DigInvItem>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling itemServiceUpdateItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dig_inv.ItemService/UpdateItem`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DigInvItemToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DigInvItemFromJSON(jsonValue));
    }

    /**
     */
    async itemServiceUpdateItem(requestParameters: ItemServiceUpdateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DigInvItem> {
        const response = await this.itemServiceUpdateItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
