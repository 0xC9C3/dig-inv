/* tslint:disable */
/* eslint-disable */
/**
 * backend.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RpcStatus,
  V1ElementId,
  V1UserGroup,
} from '../models/index';
import {
    RpcStatusFromJSON,
    RpcStatusToJSON,
    V1ElementIdFromJSON,
    V1ElementIdToJSON,
    V1UserGroupFromJSON,
    V1UserGroupToJSON,
} from '../models/index';

export interface UserGroupServiceAddItemToGroupRequest {
    body: V1ElementId;
}

export interface UserGroupServiceCreateGroupRequest {
    body: V1UserGroup;
}

export interface UserGroupServiceDeleteGroupRequest {
    body: V1ElementId;
}

export interface UserGroupServiceGetGroupRequest {
    body: object;
}

export interface UserGroupServiceGetGroupsRequest {
    body: object;
}

export interface UserGroupServiceUpdateGroupRequest {
    body: V1UserGroup;
}

/**
 * 
 */
export class UserGroupServiceApi extends runtime.BaseAPI {

    /**
     */
    async userGroupServiceAddItemToGroupRaw(requestParameters: UserGroupServiceAddItemToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling userGroupServiceAddItemToGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/your.service.v1.UserGroupService/AddItemToGroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1ElementIdToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async userGroupServiceAddItemToGroup(requestParameters: UserGroupServiceAddItemToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.userGroupServiceAddItemToGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userGroupServiceCreateGroupRaw(requestParameters: UserGroupServiceCreateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1UserGroup>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling userGroupServiceCreateGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/your.service.v1.UserGroupService/CreateGroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1UserGroupToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1UserGroupFromJSON(jsonValue));
    }

    /**
     */
    async userGroupServiceCreateGroup(requestParameters: UserGroupServiceCreateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1UserGroup> {
        const response = await this.userGroupServiceCreateGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userGroupServiceDeleteGroupRaw(requestParameters: UserGroupServiceDeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling userGroupServiceDeleteGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/your.service.v1.UserGroupService/DeleteGroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1ElementIdToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async userGroupServiceDeleteGroup(requestParameters: UserGroupServiceDeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.userGroupServiceDeleteGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userGroupServiceGetGroupRaw(requestParameters: UserGroupServiceGetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1UserGroup>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling userGroupServiceGetGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/your.service.v1.UserGroupService/GetGroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1UserGroupFromJSON(jsonValue));
    }

    /**
     */
    async userGroupServiceGetGroup(requestParameters: UserGroupServiceGetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1UserGroup> {
        const response = await this.userGroupServiceGetGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userGroupServiceGetGroupsRaw(requestParameters: UserGroupServiceGetGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1UserGroup>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling userGroupServiceGetGroups().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/your.service.v1.UserGroupService/GetGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1UserGroupFromJSON(jsonValue));
    }

    /**
     */
    async userGroupServiceGetGroups(requestParameters: UserGroupServiceGetGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1UserGroup> {
        const response = await this.userGroupServiceGetGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userGroupServiceUpdateGroupRaw(requestParameters: UserGroupServiceUpdateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1UserGroup>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling userGroupServiceUpdateGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/your.service.v1.UserGroupService/UpdateGroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1UserGroupToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1UserGroupFromJSON(jsonValue));
    }

    /**
     */
    async userGroupServiceUpdateGroup(requestParameters: UserGroupServiceUpdateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1UserGroup> {
        const response = await this.userGroupServiceUpdateGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
